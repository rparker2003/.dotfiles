# === Powerlevel10k Instant Prompt ===
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# === ZSH Configuration ===
export ZSH="$HOME/.oh-my-zsh"

# Theme
ZSH_THEME="powerlevel10k/powerlevel10k"
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

zstyle ':omz:update' mode auto  # update automatically without asking
ENABLE_CORRECTION="true"        # auto command correction
COMPLETION_WAITING_DOTS="true"  # command completion dots

export ZSH_CUSTOM="$HOME/.dotfiles/zsh"

plugins=(
  colored-man-pages
  extract
  git
  jira
  themes
  tmux
  you-should-use
  z
  zsh-autosuggestions
  zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh
source <(fzf --zsh)  # fzf key bindings
eval $(thefuck --alias)

# === History Configuration ===
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# === Aliases and Functions
# Set ls-related commands to use eza
for cmd in ls ll lt; do unalias $cmd 2>/dev/null; done
ls() { command eza --icons "$@"; }
ll() { command eza -l --icons "$@"; }
lt() { command eza --tree --level=2 --icons "$@"; }

# Add directories to PATH if not already present
if [[ ! "$PATH" =~ "$HOME/.local/bin" && ! "$PATH" =~ "$HOME/bin" ]]; then
  export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi

# Source additional ZSH configs
if [[ -d ~/.zshrc.d ]]; then
  for rc in ~/.zshrc.d/*; do
    if [[ -f "$rc" ]]; then
      source "$rc"
    fi
  done
fi
unset rc

# nvm environment
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# pyenv configs
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if command -v pyenv >/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

alias vi='nvim' # too many letters

# === AMPS Configuration ===
alias agrep=amps-grep

export JIRA_URL="https://crankuptheamps.atlassian.net/"
export PATH=$HOME/gfs/oss/cmake/2.8.1/bin:$PATH # amps build
export PATH=$HOME/ampsVersion/AMPS-develop-Release-Linux/bin:$PATH # amps bins
export COVFILE=$HOME/gfs/sixty/amps/bullseye_coverage.cov # bullseye coverage
export PATH=$HOME/gfs/bullseye/bullseye/9.9.6/bin:$PATH # bullseye coverage

# Pull down an AMPS release: ARG1 - version/label for release
getamps() {
  local save_dir="$HOME/ampsVersion" # Set the target directory
  mkdir -p "$save_dir"               # Create the directory if it doesn't exist

  for ver in "$@"; do
    ver="${ver//-/_}" # Convert any dashes to underscores

    release_name="AMPS-${ver}-Release-Linux"

    # If "develop" is requested, always replace with a fresh copy
    [[ $ver == 'develop' && -e "$save_dir/${release_name}/bin/ampServer" ]] && rm -rf "$save_dir/${release_name}"

    if [ ! -e "$save_dir/${release_name}/bin/ampServer" ]; then
      wget -P "$save_dir" "https://devnull.crankuptheamps.com/releases/amps/${ver}/${release_name}.tar.gz" &&
        tar --directory="$save_dir" -xvf "$save_dir/${release_name}.tar.gz" &&
        echo "$save_dir/${release_name}.tar.gz" &&
        rm -rf "$save_dir/${release_name}.tar.gz" # Remove the tar.gz file after extraction
    fi
  done
}

getdebug() {
  local save_dir="$HOME/ampsVersion" # Set the target directory
  mkdir -p "$save_dir"               # Create the directory if it doesn't exist

  for ver in "$@"; do
    ver="${ver//-/_}" # Convert any dashes to underscores

    release_name="AMPS-${ver}-Debug-ASAN-Linux"

    # If "develop" is requested, always replace with a fresh copy
    [[ $ver == 'develop' && -e "$save_dir/${release_name}/bin/ampServer" ]] && rm -rf "$save_dir/${release_name}"

    if [ ! -e "$save_dir/${release_name}/bin/ampServer" ]; then
      wget -P "$save_dir" "https://devnull.crankuptheamps.com/releases/amps/${ver}/${release_name}.tar.gz" &&
        tar --directory="$save_dir" -xvf "$save_dir/${release_name}.tar.gz" &&
        rm -rf "$save_dir/${release_name}.tar.gz" # Remove the tar.gz file after extraction
    fi
  done
}

# Run fit using AMPS version requested (ARG1).  ARG2 is test to run
runfit () {
  branch_name="${1//-/_}" # Convert any dashes to underscores
  getamps $branch_name

  executable="$HOME/ampsVersion/AMPS-${branch_name}-Release-Linux/bin/ampServer"

  shift # Remove our first argument
  time ./fit -a ${executable} "$@"
}

runfitdebug () {
  branch_name="${1//-/_}" # Convert any dashes to underscores
  getdebug $branch_name

  executable="$HOME/ampsVersion/AMPS-${branch_name}-Debug-ASAN-Linux/bin/ampServer"

  shift # Remove our first argument
  time ./fit -a ${executable} "$@"
}

makedebug() {
    # Ensure we're in the "build" directory
    if [[ "${PWD##*/}" != "build" ]]; then
        echo "Error: This script must be run from a directory named 'build'."
        return 1
    fi

    # Proceed with the build process
    rm -rf * && cmake .. -DCMAKE_BUILD_TYPE:STRING="Debug" -DENABLE_DEV_LOG:BOOL="ON" && ccmake . && make -j $(nproc) install
}

makerelease() {
    # Ensure we're in the "build" directory
    if [[ "${PWD##*/}" != "build" ]]; then
        echo "Error: This script must be run from a directory named 'build'."
        return 1
    fi

    # Proceed with the build process
    rm -rf * && cmake .. -DENABLE_COLOR_GCC:BOOL="OFF" -DENABLE_PLATFORM_COMPAT:BOOL="ON" && ccmake . && make -j $(nproc) install
}

lsp_make_commands() { # compile_commands.json LSP support
    # Ensure we're in the "build" directory
    if [[ "${PWD##*/}" != "build" ]]; then
        echo "Error: This script must be run from a directory named 'build'."
        return 1
    fi

    # Proceed with the build process
    /usr/bin/cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
}

png_server() {
  ~/gfs/sixty/projects/daniel/scripts/png_gallery.py "${1:-.}"
}

getartifacts() {
  local url="$1"
  local artifact_name=$(basename "$url")

  wget -q "$url" || { echo "Download failed"; return 1; }

  tar -xvf "$artifact_name" || { echo "Extraction failed"; return 1; }

  if [[ "$artifact_name" == fit-artifacts.* ]]; then
    echo "Fit artifact detected. Failures extracting..."
    cd fit-artifacts/failures
    tar -xvf * || { echo "Failure extraction failed"; return 1; }
    rm *.tar.gz
    cd ../../
  fi

  rm "$artifact_name"
}
